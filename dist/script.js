"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var WorkHoursTable = /*#__PURE__*/function () {
  function WorkHoursTable(id, wrapId, start, end) {
    _classCallCheck(this, WorkHoursTable);

    if (!id) {
      throw Error('No table ID');
    }

    if (!wrapId) {
      throw Error('No table wrap ID');
    }

    this.beginTime = start ? start : '00:00';
    this.endTime = end ? end : '23:00';
    this.timeOut = 350;
    this.tableId = id;
    this.wrapId = document.getElementById(wrapId); //Save context for method

    this.changeInterval = this.changeInterval.bind(this);
  }

  _createClass(WorkHoursTable, [{
    key: "createTable",
    value: function createTable() {
      var _this = this;

      //Create time title
      var timeTitle = document.createElement('span');
      timeTitle.classList.add('table__time-title');
      timeTitle.innerText = 'Задать интервал таблицы'; //Create time separator

      var separator = document.createElement('span');
      separator.classList.add('table__time-separator'); //Create time fields

      var inputStart = this.createInput(this.beginTime, this.tableId + 'start_interval');
      var inputEnd = this.createInput(this.endTime, this.tableId + 'end_interval'); //Create wrapper

      var wrap = document.createElement('div');
      wrap.id = this.tableId;
      wrap.classList.add('table__wrap'); //Create time-title wrap

      var timeTitleWrap = document.createElement('div');
      timeTitleWrap.classList.add('table__time-title-wrap'); //Create buttons wrap

      var buttonsWrap = document.createElement('div');
      buttonsWrap.classList.add('table__buttons-wrap');
      var buttonFill = this.createButton('Заполнить автоматически');
      var buttonClear = this.createButton('Очистить');
      buttonClear.addEventListener("click", function () {
        return _this.fillActiveHours(true);
      }, false);
      buttonFill.addEventListener("click", function () {
        return _this.fillActiveHours();
      }, false); //Append blocks

      timeTitleWrap.append(timeTitle);
      timeTitleWrap.append(inputStart);
      timeTitleWrap.append(separator);
      timeTitleWrap.append(inputEnd);
      buttonsWrap.append(buttonFill);
      buttonsWrap.append(buttonClear);
      this.wrapId.append(timeTitleWrap);
      this.wrapId.append(wrap);
      this.wrapId.append(buttonsWrap); //Render table

      this.redrawTable(wrap, this.beginTime, this.endTime);
    }
  }, {
    key: "createCell",
    value: function createCell() {
      var cell = document.createElement('div');
      cell.classList.add('table__cell');
      cell.addEventListener("click", this.toggleClass, false);
      return cell;
    }
  }, {
    key: "createRow",
    value: function createRow(day, count) {
      var row = document.createElement('div');
      row.classList.add('table__row');
      var firstCell = document.createElement('div');
      firstCell.classList.add('table__cell');
      firstCell.classList.add('table__cell--days');
      firstCell.innerHTML = "".concat(day);
      row.append(firstCell);

      for (var i = 0; i < count; i++) {
        var cell = this.createCell();
        row.append(cell);
      }

      return row;
    }
  }, {
    key: "createHoursRow",
    value: function createHoursRow(start, count) {
      var hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
      var hoursCircle = hours.concat.apply(hours, hours);
      var startHour = start.split(':');
      var startPoint = hoursCircle.indexOf(startHour[0]); //create row

      var row = document.createElement('div');
      row.classList.add('table__row');
      row.classList.add('table__row--hours'); //create first cell

      var firstCell = document.createElement('div');
      firstCell.classList.add('table__cell');
      firstCell.classList.add('table__cell--days'); //append blocks

      row.append(firstCell);

      for (var i = startPoint; i < startPoint + count; i++) {
        //create default hour cell
        var cell = document.createElement('div');
        cell.classList.add('table__cell');
        var minutes = document.createElement('span');
        minutes.classList.add('minutes');
        minutes.innerText = '00';

        if (i % 2 !== 0) {
          cell.innerText = hoursCircle[i];
          cell.append(minutes);
        }

        row.append(cell);
      }

      return row;
    }
  }, {
    key: "createInput",
    value: function createInput(value, id) {
      var input = document.createElement('input');
      input.id = id;
      input.type = 'time';
      input.min = '00:00';
      input.max = '23:30';
      input.value = value;
      input.addEventListener("change", this.changeInterval, false);
      return input;
    }
  }, {
    key: "createButton",
    value: function createButton(text) {
      var button = document.createElement('button');
      button.classList.add('table__button');
      button.type = 'button';
      button.innerText = text;
      return button;
    }
  }, {
    key: "calculateInterval",
    value: function calculateInterval(from, to) {
      var starts = from.split(':');
      var ends = to.split(':');
      var startHour = Number(starts[0]);
      var startMinute = Number(starts[1]);
      var endHour = Number(ends[0]);
      var endMinute = Number(ends[1]); //Night shifts

      if (endHour < startHour) {
        endHour += 24;
      }

      return endHour - startHour;
    }
  }, {
    key: "redrawTable",
    value: function redrawTable(wrap, start, end) {
      var count = this.calculateInterval(start, end);
      var days = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];
      var hoursRow = this.createHoursRow(start, count);

      if (count > 0) {
        wrap.append(hoursRow);

        for (var i = 0; i < 7; i++) {
          var row = this.createRow(days[i], count);
          wrap.append(row);
        }
      }
    }
  }, {
    key: "recalculateRows",
    value: function recalculateRows(start, end) {
      var table = document.getElementById(this.tableId);
      var rows = table.querySelectorAll('.table__row');
      var count = this.calculateInterval(start, end);

      if (count <= 0) {
        return;
      }

      var hoursRow = this.createHoursRow(start, count);
      rows[0].remove();
      table.prepend(hoursRow);

      for (var r = 1; r < rows.length; r++) {
        var cells = rows[r].querySelectorAll('.table__cell');

        if (count < cells.length) {
          for (var i = cells.length - 1; i > count; i--) {
            cells[i].remove();
          }
        } else if (count >= cells.length) {
          for (var _i = cells.length - 1; _i < count; _i++) {
            var cell = document.createElement('div');
            cell.classList.add('table__cell');
            cell.addEventListener("click", this.toggleClass, false);
            rows[r].append(cell);
          }
        }
      }
    }
  }, {
    key: "clearTableAnimate",
    value: function clearTableAnimate() {
      var _this2 = this;

      var table = document.getElementById(this.tableId);
      var rows = table.querySelectorAll('.table__row');

      for (var i = 0; i < rows.length; i++) {
        var cells = rows[i].querySelectorAll('.table__cell'); //possible animations

        var aliceTumbling = [{
          transform: 'rotate(0) translate3D(-50%, -50%, 0',
          color: '#000'
        }, {
          color: '#431236',
          offset: 0.3
        }, {
          transform: 'rotate(360deg) translate3D(-50%, -50%, 0)',
          color: '#000'
        }];
        var aliceTiming = {
          duration: this.timeOut,
          iterations: 1
        };
        cells.forEach(function (elem) {
          elem.classList.add('hide'); //elem.animate(aliceTumbling, aliceTiming);

          setTimeout(function () {
            elem.remove();
          }, _this2.timeOut);
        });
      }
    }
  }, {
    key: "fillActiveHours",
    value: function fillActiveHours(clear) {
      var table = document.getElementById(this.tableId);
      var rows = table.querySelectorAll('.table__row');

      for (var r = 1; r < rows.length; r++) {
        var cells = rows[r].querySelectorAll('.table__cell');

        if (clear) {
          for (var i = 1; i < cells.length; i++) {
            cells[i].classList.remove('active');
          }
        } else {
          for (var _i2 = 1; _i2 < cells.length; _i2++) {
            cells[_i2].classList.add('active');
          }
        }
      }
    }
  }, {
    key: "toggleClass",
    value: function toggleClass(e) {
      e.target.classList.toggle('active');
    }
  }, {
    key: "changeInterval",
    value: function changeInterval(e) {
      if (e.target.id === this.tableId + 'start_interval') {
        this.beginTime = e.target.value;
      }

      if (e.target.id === this.tableId + 'end_interval') {
        this.endTime = e.target.value;
      }

      this.recalculateRows(this.beginTime, this.endTime);
    }
  }]);

  return WorkHoursTable;
}();

var table = new WorkHoursTable('work_hours_table', 'main_wrap');
table.createTable(); //const table2 = new WorkHoursTable('work_hours_table2', 'main_wrap');
//table2.createTable();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
