"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var WorkHoursTable = /*#__PURE__*/function () {
  function WorkHoursTable(wrap, start, end) {
    _classCallCheck(this, WorkHoursTable);

    this.beginTime = start ? start : '07:00';
    this.endTime = end ? end : '17:00';
    this.timeOut = 350; //Save context for method

    this.changeInterval = this.changeInterval.bind(this);
  }

  _createClass(WorkHoursTable, [{
    key: "createTable",
    value: function createTable() {
      var wrap = document.createElement('div');
      wrap.id = 'work_hours_table';
      wrap.classList.add('table__wrap');
      document.body.append(wrap); //Create time fields

      this.createInput(document.body, this.beginTime, 'start_interval');
      this.createInput(document.body, this.endTime, 'end_interval');
      this.redrawTable(wrap, this.beginTime, this.endTime);
    }
  }, {
    key: "createCell",
    value: function createCell() {
      var cell = document.createElement('div');
      cell.classList.add('table__cell');
      cell.classList.add('active');
      cell.addEventListener("click", this.toggleClass, false);
      return cell;
    }
  }, {
    key: "createRow",
    value: function createRow(wrap, day, count) {
      var row = document.createElement('div');
      row.classList.add('table__row');
      var firstCell = document.createElement('div');
      firstCell.classList.add('table__cell');
      firstCell.classList.add('table__cell--days');
      firstCell.innerHTML = "".concat(day);
      row.append(firstCell);

      for (var i = 0; i < count; i++) {
        var cell = this.createCell();
        row.append(cell);
      }

      wrap.append(row);
    }
  }, {
    key: "createInput",
    value: function createInput(wrap, value, id) {
      var input = document.createElement('input');
      input.id = id;
      input.type = 'time';
      input.min = '00:00';
      input.max = '23:30';
      input.value = value;
      input.addEventListener("change", this.changeInterval, false);
      wrap.append(input);
    }
  }, {
    key: "calculateInterval",
    value: function calculateInterval(from, to) {
      var starts = from.split(':');
      var ends = to.split(':');
      return Number(ends[0]) - Number(starts[0]);
    }
  }, {
    key: "redrawTable",
    value: function redrawTable(wrap, start, end) {
      var count = this.calculateInterval(start, end);
      var days = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];

      if (count > 0) {
        for (var i = 0; i < 7; i++) {
          this.createRow(wrap, days[i], count);
        }
      }
    }
  }, {
    key: "recalculateRows",
    value: function recalculateRows(start, end) {
      var table = document.getElementById('work_hours_table');
      var rows = table.querySelectorAll('.table__row');
      var count = this.calculateInterval(start, end);

      if (count <= 0) {
        return;
      }

      for (var r = 0; r < rows.length; r++) {
        var cells = rows[r].querySelectorAll('.table__cell');

        if (count < cells.length) {
          for (var i = cells.length - 1; i > count; i--) {
            cells[i].remove();
          }
        } else if (count >= cells.length) {
          for (var _i = cells.length - 1; _i < count; _i++) {
            var cell = document.createElement('div');
            cell.classList.add('table__cell');
            cell.classList.add('active');
            cell.addEventListener("click", this.toggleClass, false);
            rows[r].append(cell);
          }
        }
      }
    }
  }, {
    key: "clearTable",
    value: function clearTable() {
      var _this = this;

      var table = document.getElementById('work_hours_table');
      var rows = table.querySelectorAll('.table__row');

      for (var i = 0; i < rows.length; i++) {
        var cells = rows[i].querySelectorAll('.table__cell');
        var aliceTumbling = [{
          transform: 'rotate(0) translate3D(-50%, -50%, 0',
          color: '#000'
        }, {
          color: '#431236',
          offset: 0.3
        }, {
          transform: 'rotate(360deg) translate3D(-50%, -50%, 0)',
          color: '#000'
        }];
        var aliceTiming = {
          duration: this.timeOut,
          iterations: 1
        };
        cells.forEach(function (elem) {
          elem.classList.add('hide'); //elem.animate(aliceTumbling, aliceTiming);

          setTimeout(function () {
            elem.remove();
          }, _this.timeOut);
        });
      }
    }
  }, {
    key: "toggleClass",
    value: function toggleClass(e) {
      e.target.classList.toggle('active');
    }
  }, {
    key: "changeInterval",
    value: function changeInterval(e) {
      if (e.target.id === 'start_interval') {
        this.beginTime = e.target.value;
      }

      if (e.target.id === 'end_interval') {
        this.endTime = e.target.value;
      }

      this.recalculateRows(this.beginTime, this.endTime);
    }
  }]);

  return WorkHoursTable;
}();

var table = new WorkHoursTable();
table.createTable();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
